#!/usr/bin/env sh

start_streaming() {
    ffmpeg \
    -threads 0 \
    -thread_queue_size 512 -f x11grab -s 1920x1080 -framerate 30 -i "$DISPLAY" \
    -thread_queue_size 512 -f v4l2 -video_size 320x240 -framerate 30 -i /dev/video1 \
    -thread_queue_size 1024 -f pulse -itsoffset 0.350 -i "alsa_output.usb-SteelSeries_SteelSeries_Arctis_7-00.analog-stereo.monitor" \
    -thread_queue_size 1024 -f pulse -itsoffset 0.350 -i "alsa_input.usb-SteelSeries_SteelSeries_Arctis_7-00.analog-mono" \
    -c:a aac \
    -init_hw_device vaapi=va:/dev/dri/renderD128,driver=i965 -filter_hw_device va \
    -filter_complex \
    "[0:v]setpts=PTS-STARTPTS[bg]; \
    [1:v]setpts=PTS-STARTPTS[fg]; \
    [bg][fg]overlay=W-w-10:H-h-10,format=nv12,hwupload[out]" \
    -map "[out]" \
    -c:v h264_vaapi \
    -r:v 30 -g:v 60 -bf:v 3 -refs:v 16 \
    -filter_complex "[2:a][3:a]amerge=inputs=2[aout]" -map "[aout]" -ac 2 \
    -f flv "rtmp://tau.hodor/hls/index" &
    echo $! > /tmp/streamingpid

    notify-send "Stream started!"
}

stop_streaming() {
	streampid="$(cat /tmp/streamingpid)"
	# kill with SIGTERM, allowing finishing touches.
	kill "$streampid"
	# even after SIGTERM, ffmpeg may still run, so SIGKILL it.
	sleep 3
    ps "$streampid" > /dev/null 2>&1 && kill -9 "$streampid"
	rm -f /tmp/streamingpid
    notify-send "Stream stopped!"
}
case "$1" in
    start) start_streaming
        ;;
    stop) stop_streaming
        ;;
esac
